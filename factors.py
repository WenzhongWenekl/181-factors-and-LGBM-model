#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jun  1 13:12:40 2021

@author: Andy
"""
from functions import *
import pandas as pd
import copy
# dates = pd.read_csv('SH#600000.txt',header=None, encoding = 'gb2312') # 获取日期数据

dates = pd.read_csv('/Users/Andy/Desktop/大二暑假/中安鼎盛实习/191因子/SH#600000.txt', names=['日期','OPEN','HIGH','LOW','CLOSE','VOLUME','AMOUNT'], header=None, sep="	",encoding = 'gb2312') # 获取日期数据

dates.drop([len(dates)-1],inplace=True)
Data = dates
VOLUME = Data['VOLUME']
CLOSE = Data['CLOSE']
OPEN = Data['OPEN']
HIGH = Data['HIGH']
LOW = Data['LOW']
AMOUNT = Data['AMOUNT']
VWAP =  AMOUNT / VOLUME
RET = Data['CLOSE'].pct_change(periods=1)
BANCHMARK_INDEX_CLOSE = BANCHMARK_INDEX(CLOSE)
BANCHMARK_INDEX_OPEN = BANCHMARK_INDEX(OPEN)

def alpha1(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# -1 * CORR(RANK(DELTA(LOG(VOLUME), 1)), RANK(((CLOSE-OPEN) / OPEN)), 6))
    arr1 = RANK(DELTA(LOG(VOLUME), 1))
    arr2 = RANK((CLOSE - OPEN) / OPEN)
    return -1*CORR(arr1, arr2, 6)

a1 = alpha1(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN)

def alpha2(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# -1 * DELTA((((CLOSE-LOW)-(HIGH-CLOSE)) / (HIGH-LOW)), 1))
    return -1 * DELTA((((CLOSE-LOW)-(HIGH-CLOSE)) / (HIGH-LOW)), 1)

a2 = alpha2(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN)

factors  =  pd.DataFrame({ 'Date':Data['日期'], '1' :a1, '2' :a2})

#%%
def alpha3(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# -1*SUM(
# (CLOSE = DELAY(CLOSE,1)?0
# :CLOSE-(CLOSE>DELAY(CLOSE,1)?MIN(LOW,DELAY(CLOSE,1)):MAX(HIGH,DELAY(CLOSE,1)))
# ),6)
    closePrice = copy.deepcopy(CLOSE)
    condition1 = DELTA(closePrice,1) > 0.0
    condition2 = DELTA(closePrice,1) < 0.0
    condition3 = DELTA(closePrice,1) == 0.0
    closePrice[condition3] = 0.0
    closePrice[condition1] = CLOSE[condition1] - MIN_two_dfs(LOW[condition1], DELAY(CLOSE[condition1].replace(np.NaN,10000),1))
    closePrice[condition2] = CLOSE['CLOSE'][condition2] - MAX_two_dfs(HIGH[condition2], DELAY(CLOSE[condition2].replace(np.NaN,0),1))
    return -1 * SUM(closePrice, 6)

def alpha4(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (((SUM(CLOSE,8)/8)+STD(CLOSE,8))<(SUM(CLOSE,2)/2))
# ?-1:(SUM(CLOSE,2)/2<(SUM(CLOSE,8)/8-STD(CLOSE,8))
#     ?1:(1<=(VOLUME/MEAN(VOLUME,20))
#       ?1:-1))
    sr = pd.Series(np.ones(len(CLOSE))) * -1
    condition1 = ((SUM(CLOSE,8)/8)+STD(CLOSE,8)) < (SUM(CLOSE,2)/2)
    condition2 = SUM(CLOSE,2)/2 < (SUM(CLOSE,8)/8-STD(CLOSE,8))
    condition3 = 1 <= (VOLUME/MEAN(VOLUME,20))
    sr[condition3] = 1
    sr[condition2] = 1
    sr[condition1] = -1
    return sr

def alpha5(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# -1*TSMAX(CORR(TSRANK(VOLUME,5),TSRANK(HIGH,5),5),3)    
    return -1 * TSMAX(CORR(TSRANK(VOLUME,5),TSRANK(HIGH,5),5),3)


#!!!!有问题

def alpha6(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# -1 * RANK(SIGN(DELTA(OPEN * 0.85 + HIGH * 0.15, 4)))
    step1 = DELTA(OPEN * 0.85 + HIGH * 0.15, 4)
    step2 = SIGN(step1)
    return -1 * RANK(step2)

def alpha7(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (RANK(MAX(VWAP-CLOSE,3))+RANK(MIN(VWAP-CLOSE,3)))*RANK(DELTA(VOLUME,3))  
    return (RANK(MAX(VWAP-CLOSE,3))+RANK(MIN(VWAP-CLOSE,3)))*RANK(DELTA(VOLUME,3))

def alpha8(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# -1*RANK(DELTA((HIGH+LOW)/10+VWAP*0.8,4))
    return -1*RANK(DELTA((HIGH+LOW)/10+VWAP*0.8,4))

def alpha9(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SMA(((HIGH+LOW)/2-(DELAY(HIGH,1)+DELAY(LOW,1))/2)*(HIGH-LOW)/VOLUME,7,2)  
    step1 = (HIGH+LOW)/2-(DELAY(HIGH,1)+DELAY(LOW,1))/2
    step2 = step1 * (HIGH-LOW)/VOLUME
    return SMA(step2, 7, 2)

def alpha10(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# RANK(MAX(((RET<0)?STD(RET,20):CLOSE)^2, 5))
    step1 = STD(RET, 20)
    condition = step1>= 0
    step1[condition] = CLOSE
    return RANK(MAX(step1 ** 2, 5))
    
def alpha11(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SUM(((CLOSE-LOW)-(HIGH-CLOSE))/(HIGH-LOW)*VOLUME,6)
    return SUM(((CLOSE-LOW)-(HIGH-CLOSE))/(HIGH-LOW)*VOLUME,6)

def alpha12(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# RANK(OPEN-SUM(VWAP,10)/10)*RANK(ABS(CLOSE-VWAP))*(-1)
    return RANK(OPEN-SUM(VWAP,10)/10)*RANK(ABS(CLOSE-VWAP))*(-1)

def alpha13(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# ((HIGH*LOW)^0.5)-VWAP
    return ((HIGH*LOW)**0.5)-VWAP

def alpha14(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# CLOSE-DELAY(CLOSE,5)
    return CLOSE-DELAY(CLOSE,5)

def alpha15(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# OPEN/DELAY(CLOSE,1)-1
    return OPEN/DELAY(CLOSE,1)-1

def alpha16(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (-1*TSMAX(RANK(CORR(RANK(VOLUME),RANK(VWAP),5)),5))
    return (-1*TSMAX(RANK(CORR(RANK(VOLUME),RANK(VWAP),5)),5))

def alpha17(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (-1*TSMAX(RANK(CORR(RANK(VOLUME),RANK(VWAP),5)),5))
    return (-1*TSMAX(RANK(CORR(RANK(VOLUME),RANK(VWAP),5)),5))

def alpha18(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# CLOSE/DELAY(CLOSE,5)
    return CLOSE/DELAY(CLOSE,5)

def alpha19(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (CLOSE<DELAY(CLOSE,5)
#  ?(CLOSE/DELAY(CLOSE,5)-1):(CLOSE=DELAY(CLOSE,5)
#   ?0:(1-DELAY(CLOSE,5)/CLOSE)))
    sr = pd.Series(np.zeros(len(CLOSE)))
    condition1 = CLOSE < DELAY(CLOSE,5)
    condition2 = CLOSE == DELAY(CLOSE,5)
    condition3 = CLOSE > DELAY(CLOSE,5)
    sr[condition1] = CLOSE[condition1] / DELAY(CLOSE[condition1], 5) - 1
    sr[condition3] = 1 - DELAY(CLOSE[condition3], 5) / CLOSE[condition3]
    return sr

def alpha20(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (CLOSE-DELAY(CLOSE,6))/DELAY(CLOSE,6)*100
    return (CLOSE/DELAY(CLOSE,6)-1)*100

def alpha21(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# REGBETA(MEAN(CLOSE,6),SEQUENCE(6),6)
    return REGBETA(MEAN(CLOSE,6),SEQUENCE(6),6)

def alpha22(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# cannot find SMEAN in appendix, it seems that it should be SMA
# SMEAN((CLOSE/MEAN(CLOSE,6)-1-DELAY(CLOSE/MEAN(CLOSE,6)-1,3)),12,1)
    return SMA((CLOSE/MEAN(CLOSE,6)-1-DELAY(CLOSE/MEAN(CLOSE,6)-1,3)),12,1)
     
def alpha23(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SMA((CLOSE>DELAY(CLOSE,1)
#  ?STD(CLOSE,20):0),20,1)/(SMA((CLOSE>DELAY(CLOSE,1)
#   ?STD(CLOSE,20):0),20,1)+SMA((CLOSE<=DELAY(CLOSE,1)
#    ?STD(CLOSE,20):0),20,1))*100
    closePrice = copy.deepcopy(CLOSE)
    sr1 = pd.Series(np.zeros(len(closePrice)))
    sr2 = pd.Series(np.zeros(len(closePrice)))
    condition1 = CLOSE <= DELAY(CLOSE,1)
    condition2 = CLOSE > DELAY(CLOSE,1)
    sr1[condition2] = STD(closePrice, 20)
    sr2[condition1] = STD(closePrice, 20)
    return 100 * SMA(sr1, 20, 1) / (SMA(sr1, 20, 1) + SMA(sr2, 20, 1))

def alpha24(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SMA(CLOSE-DELAY(CLOSE,5),5,1)
    return SMA(CLOSE-DELAY(CLOSE,5),5,1)

def alpha25(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (-1*RANK(DELTA(CLOSE,7)*(1-RANK(DECAYLINEAR(VOLUME/MEAN(VOLUME,20),9)))))*(1+RANK(SUM(RET,250)))
    return (-1*RANK(DELTA(CLOSE,7)*(1-RANK(DECAYLINEAR(VOLUME/MEAN(VOLUME,20),9)))))*(1+RANK(SUM(RET,250)))
 
def alpha26(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# ((((SUM(CLOSE, 7) / 7) - CLOSE)) + ((CORR(VWAP, DELAY(CLOSE, 5), 230))))
    return ((((SUM(CLOSE, 7) / 7) - CLOSE)) + ((CORR(VWAP, DELAY(CLOSE, 5), 230))))

def alpha27(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# WMA((CLOSE-DELTA(CLOSE,3))/DELAY(CLOSE,3)*100+(CLOSE-DELAY(CLOSE,6))/DELAY(CLOSE,6)*100,12)
    return WMA((CLOSE-DELTA(CLOSE,3))/DELAY(CLOSE,3)*100+(CLOSE-DELAY(CLOSE,6))/DELAY(CLOSE,6)*100,12)

def alpha28(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# 3*SMA((CLOSE-TSMIN(LOW,9))/(TSMAX(HIGH,9)-TSMIN(LOW,9))*100,3,1)
#  -2*SMA(SMA((CLOSE-TSMIN(LOW,9))/( TSMAX(HIGH,9)-TSMIN(LOW,9))*100,3,1),3,1) 
    step1 = 3 * SMA((CLOSE-TSMIN(LOW,9))/(TSMAX(HIGH,9)-TSMIN(LOW,9))*100,3,1)
    step2 = -2*SMA(SMA((CLOSE-TSMIN(LOW,9))/( TSMAX(HIGH,9)-TSMIN(LOW,9))*100,3,1),3,1)
    return step1 + step2

def alpha29(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (CLOSE-DELAY(CLOSE,6))/DELAY(CLOSE,6)*VOLUME
    return (CLOSE-DELAY(CLOSE,6))/DELAY(CLOSE,6)*VOLUME


def alpha30(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
    pass
# 太难了 一起写吧 ：）

def alpha31(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (CLOSE-MEAN(CLOSE,12))/MEAN(CLOSE,12)*100
    return (CLOSE-MEAN(CLOSE,12))/MEAN(CLOSE,12)*100

def alpha32(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (-1*SUM(RANK(CORR(RANK(HIGH),RANK(VOLUME),3)),3))
    return (-1*SUM(RANK(CORR(RANK(HIGH),RANK(VOLUME),3)),3))

def alpha33(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (-1*TSMIN(LOW,5)+DELAY(TSMIN(LOW,5),5))*RANK((SUM(RET,240)-SUM(RET,20))/220)*TSRANK(VOLUME,5)
    return (-1*TSMIN(LOW,5)+DELAY(TSMIN(LOW,5),5))*RANK((SUM(RET,240)-SUM(RET,20))/220)*TSRANK(VOLUME,5)

def alpha34(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# MEAN(CLOSE,12)/CLOSE
    return MEAN(CLOSE,12)/CLOSE

def alpha35(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (MIN(RANK(DECAYLINEAR(DELTA(OPEN, 1), 15)), RANK(DECAYLINEAR(CORR((VOLUME), ((OPEN * 0.65) + (OPEN *0.35)), 17),7))) * -1)
    return (MIN(RANK(DECAYLINEAR(DELTA(OPEN, 1), 15)), RANK(DECAYLINEAR(CORR((VOLUME), ((OPEN * 0.65) + (OPEN *0.35)), 17),7))) * -1)


def alpha36(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# RANK(SUM(CORR(RANK(VOLUME), RANK(VWAP)),6), 2)
    return RANK(SUM(CORR(RANK(VOLUME), RANK(VWAP),6), 2))

def alpha37(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (-1*RANK(SUM(OPEN,5)*SUM(RET,5)-DELAY(SUM(OPEN,5)*SUM(RET,5),10)))
    return (-1*RANK(SUM(OPEN,5)*SUM(RET,5)-DELAY(SUM(OPEN,5)*SUM(RET,5),10)))

def alpha38(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# ((SUM(HIGH,20)/20)<HIGH)?(-1*DELTA(HIGH,2)):0
    sr = -1 * DELTA(HIGH,2)
    condition = (SUM(HIGH,20)/20) >= HIGH
    sr[condition] = 0
    return sr

def alpha39(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (RANK(DECAYLINEAR(DELTA(CLOSE,2),8))-RANK(DECAYLINEAR(CORR(VWAP*0.3+OPEN*0.7,SUM(MEAN(VOLUME,180),37),14),12)))*-1
    return (RANK(DECAYLINEAR(DELTA(CLOSE,2),8))-RANK(DECAYLINEAR(CORR(VWAP*0.3+OPEN*0.7,SUM(MEAN(VOLUME,180),37),14),12))) * (-1)

def alpha40(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
#  SUM(CLOSE>DELAY(CLOSE,1)
#   ?VOLUME:0,26)/SUM(CLOSE<=DELAY(CLOSE,1)
#     ?VOLUME:0,26)*100
    condition1 = CLOSE > DELAY(CLOSE,1)
    condition2 = CLOSE <= DELAY(CLOSE,1)
    sr1 = copy.deepcopy(VOLUME)
    sr2 = copy.deepcopy(VOLUME)
    sr1[condition2] = 0
    sr2[condition1] = 0
    step1 = SUM(sr1, 26)
    step2 = SUM(sr2, 26)
    return step1 / step2 * 100

def alpha41(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# RANK(MAX(DELTA(VWAP,3),5))*-1
    return RANK(MAX(DELTA(VWAP,3),5))*-1

def alpha42(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (-1*RANK(STD(HIGH,10)))*CORR(HIGH,VOLUME,10)
    return (-1*RANK(STD(HIGH,10)))*CORR(HIGH,VOLUME,10)

def alpha43(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
#  (SUM(CLOSE>DELAY(CLOSE,1)
#    ?VOLUME:(CLOSE<DELAY(CLOSE,1)
#      ?-VOLUME:0),6))
    sr = copy.deepcopy(VOLUME)
    condition1 = CLOSE <= DELAY(CLOSE,1)
    condition2 = CLOSE == DELAY(CLOSE,1)
    sr[condition1] = -1 * VOLUME[condition1]
    sr[condition2] = 0
    return SUM(sr, 6)

def alpha44(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (TSRANK(DECAYLINEAR(CORR(LOW,MEAN(VOLUME,10),7),6),4)+TSRANK(DECAYLINEAR(DELTA(VWAP,3),10),15))
    return (TSRANK(DECAYLINEAR(CORR(LOW,MEAN(VOLUME,10),7),6),4)+TSRANK(DECAYLINEAR(DELTA(VWAP,3),10),15))

def alpha45(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (RANK(DELTA(CLOSE*0.6+OPEN*0.4,1))*RANK(CORR(VWAP,MEAN(VOLUME,150),15)))
    return (RANK(DELTA(CLOSE*0.6+OPEN*0.4,1))*RANK(CORR(VWAP,MEAN(VOLUME,150),15)))

def alpha46(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (MEAN(CLOSE,3)+MEAN(CLOSE,6)+MEAN(CLOSE,12)+MEAN(CLOSE,24))/(4*CLOSE)
    return (MEAN(CLOSE,3)+MEAN(CLOSE,6)+MEAN(CLOSE,12)+MEAN(CLOSE,24))/(4*CLOSE)

def alpha47(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SMA((TSMAX(HIGH,6)-CLOSE)/(TSMAX(HIGH,6)-TSMIN(LOW,6))*100,9,1)
    return SMA((TSMAX(HIGH,6)-CLOSE)/(TSMAX(HIGH,6)-TSMIN(LOW,6))*100,9,1)

def alpha48(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# -1*RANK(SIGN(CLOSE-DELAY(CLOSE,1))+SIGN(DELAY(CLOSE,1)-DELAY(CLOSE,2))+SIGN(DELAY(CLOSE,2)-DELAY(CLOSE,3)))*SUM(VOLUME,5)/SUM(VOLUME,20)
    return -1 * RANK(SIGN(CLOSE-DELAY(CLOSE,1))+SIGN(DELAY(CLOSE,1)-DELAY(CLOSE,2))+SIGN(DELAY(CLOSE,2)-DELAY(CLOSE,3)))*SUM(VOLUME,5)/SUM(VOLUME,20)

def alpha49(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SUM(HIGH+LOW>=DELAY(HIGH,1)+DELAY(LOW,1)
#   ?0:MAX(ABS(HIGH-DELAY(HIGH,1)),ABS(LOW-DELAY(LOW,1))),12)/

# (SUM(HIGH+LOW>=DELAY(HIGH,1)+DELAY(LOW,1)
#   ?0:MAX(ABS(HIGH-DELAY(HIGH,1)),ABS(LOW-DELAY(LOW,1))),12)+

# SUM(HIGH+LOW<=DELAY(HIGH,1)+DELAY(LOW,1)
#   ?0:MAX(ABS(HIGH-DELAY(HIGH,1)),ABS(LOW-DELAY(LOW,1))),12))
    condition1 = HIGH+LOW >= DELAY(HIGH,1)+DELAY(LOW,1)
    condition2 = HIGH+LOW <= DELAY(HIGH,1)+DELAY(LOW,1)
    sr1 = copy.deepcopy(MAX(ABS(HIGH-DELAY(HIGH,1)),ABS(LOW-DELAY(LOW,1))))
    sr2 = copy.deepcopy(MAX(ABS(HIGH-DELAY(HIGH,1)),ABS(LOW-DELAY(LOW,1))))
    sr1[condition1] = 0
    sr2[condition2] = 0
    step1 = SUM(sr1, 12)
    step2 = SUM(sr2, 12)
    return step1 / (step1 + step2)

def alpha50(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SUM(HIGH+LOW<=DELAY(HIGH,1)+DELAY(LOW,1)
#   ?0:MAX(ABS(HIGH-DELAY(HIGH,1)),ABS(LOW-DELAY(LOW,1))),12)/

# (SUM(HIGH+LOW<=DELAY(HIGH,1)+DELAY(LOW,1)
#   ?0:MAX(ABS(HIGH-DELAY(HIGH,1)),ABS(LOW-DELAY(LOW,1))),12)

# +SUM(HIGH+LOW>=DELAY(HIGH,1)+DELAY(LOW,1)
#   ?0:MAX(ABS(HIGH-DELAY(HIGH,1)),ABS(LOW-DELAY(LOW,1))),12))

# -SUM(HIGH+LOW>=DELAY(HIGH,1)+DELAY(LOW,1)
#   ?0:MAX(ABS(HIGH-DELAY(HIGH,1)),ABS(LOW-DELAY(LOW,1))),12)/

# (SUM(HIGH+LOW>=DELAY(HIGH,1)+DELAY(LOW,1)
#   ?0:MAX(ABS(HIGH-DELAY(HIGH,1)),ABS(LOW-DELAY(LOW,1))),12)

# +SUM(HIGH+LOW<=DELAY(HIGH,1)+DELAY(LOW,1)
#   ?0:MAX(ABS(HIGH-DELAY(HIGH,1)),ABS(LOW-DELAY(LOW,1))),12))
    condition1 = HIGH+LOW <= DELAY(HIGH,1)+DELAY(LOW,1)
    condition2 = HIGH+LOW >= DELAY(HIGH,1)+DELAY(LOW,1)
    sr1 = copy.deepcopy(MAX(ABS(HIGH-DELAY(HIGH,1)),ABS(LOW-DELAY(LOW,1))))
    sr2 = copy.deepcopy(MAX(ABS(HIGH-DELAY(HIGH,1)),ABS(LOW-DELAY(LOW,1))))
    sr1[condition1] = 0
    sr2[condition2] = 0
    sum1 = SUM(sr1, 12)
    sum2 = SUM(sr2, 12)
    return sum1 / (sum1 + sum2) - sum2 / (sum2 + sum1)

def alpha51(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SUM(HIGH+LOW<=DELAY(HIGH,1)+DELAY(LOW,1)
#   ?0:MAX(ABS(HIGH-DELAY(HIGH,1)),ABS(LOW-DELAY(LOW,1))),12)/

# (SUM(HIGH+LOW<=DELAY(HIGH,1)+DELAY(LOW,1)
#   ?0:MAX(ABS(HIGH-DELAY(HIGH,1)),ABS(LOW-DELAY(LOW,1))),12)

# +SUM(HIGH+LOW>=DELAY(HIGH,1)+DELAY(LOW,1)
#   ?0:MAX(ABS(HIGH-DELAY(HIGH,1)),ABS(LOW-DELAY(LOW,1))),12))
    condition1 = HIGH+LOW <= DELAY(HIGH,1)+DELAY(LOW,1)
    condition2 = HIGH+LOW >= DELAY(HIGH,1)+DELAY(LOW,1)
    sr1 = copy.deepcopy(MAX(ABS(HIGH-DELAY(HIGH,1)),ABS(LOW-DELAY(LOW,1))))
    sr2 = copy.deepcopy(MAX(ABS(HIGH-DELAY(HIGH,1)),ABS(LOW-DELAY(LOW,1))))
    sr1[condition1] = 0
    sr2[condition2] = 0
    sum1 = SUM(sr1, 12)
    sum2 = SUM(sr2, 12)
    return sum1 / (sum1 + sum2)

def alpha52(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SUM(MAX(0,HIGH-DELAY((HIGH+LOW+CLOSE)/3,1)),26)/SUM(MAX(0,DELAY((HIGH+LOW+CLOSE)/3,1)-LOW),26)*100
    return SUM(MAX(HIGH-DELAY((HIGH+LOW+CLOSE)/3,1),0),26)/SUM(MAX(DELAY((HIGH+LOW+CLOSE)/3,1)-LOW,0),26)*100

def alpha53(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# COUNT(CLOSE>DELAY(CLOSE,1),12)/12*100
    return COUNT(CLOSE>DELAY(CLOSE,1),12)/12*100

def alpha54(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (-1*RANK(STD(ABS(CLOSE-OPEN))+CLOSE-OPEN+CORR(CLOSE,OPEN,10))) 
# STD here does not give the parameter n, i use 10 here
    return -1*RANK(STD(ABS(CLOSE-OPEN),10)+CLOSE-OPEN+CORR(CLOSE,OPEN,10))

def alpha55(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SUM(
# 16*(CLOSE+(CLOSE-OPEN)/2-DELAY(OPEN,1))/
# ((ABS(HIGH-DELAY(CLOSE,1))>ABS(LOW-DELAY(CLOSE,1)) & ABS(HIGH-DELAY(CLOSE,1))>ABS(HIGH-DELAY(LOW,1)) 
#   ? ABS(HIGH-DELAY(CLOSE,1))+ABS(LOW-DELAY(CLOSE,1))/2+ABS(DELAY(CLOSE,1)-DELAY(OPEN,1))/4:
# (ABS(LOW-DELAY(CLOSE,1))>ABS(HIGH-DELAY(LOW,1)) & ABS(LOW-DELAY(CLOSE,1))>ABS(HIGH-DELAY(CLOSE,1))
#   ? ABS(LOW-DELAY(CLOSE,1))+ABS(HIGH-DELAY(CLOSE,1))/2+ABS(DELAY(CLOSE,1)-DELAY(OPEN,1))/4:
# ABS(HIGH-DELAY(LOW,1))+ABS(DELAY(CLOSE,1)-DELAY(OPEN,1))/4)))
# *MAX(ABS(HIGH-DELAY(CLOSE,1)),ABS(LOW-DELAY(CLOSE,1))),20)
    condition1 = (ABS(HIGH-DELAY(CLOSE,1)) > ABS(LOW-DELAY(CLOSE,1))) & (ABS(HIGH-DELAY(CLOSE,1)) > ABS(HIGH-DELAY(LOW,1)))
    condition2 = (ABS(LOW-DELAY(CLOSE,1)) > ABS(HIGH-DELAY(LOW,1))) & (ABS(LOW-DELAY(CLOSE,1)) > ABS(HIGH-DELAY(CLOSE,1)))
    step1 = 16*(CLOSE+(CLOSE-OPEN)/2-DELAY(OPEN,1))
    step2 = ABS(HIGH-DELAY(CLOSE,1)) + ABS(LOW-DELAY(CLOSE,1))/2 + ABS(DELAY(CLOSE,1)-DELAY(OPEN,1))/4
    step3 = ABS(LOW-DELAY(CLOSE,1)) + ABS(HIGH-DELAY(CLOSE,1))/2+ABS(DELAY(CLOSE,1)-DELAY(OPEN,1))/4
    step4 = ABS(HIGH-DELAY(LOW,1))+ABS(DELAY(CLOSE,1)-DELAY(OPEN,1))/4
    step5 = MAX(ABS(HIGH-DELAY(CLOSE,1)),ABS(LOW-DELAY(CLOSE,1)))
    step4[condition2] = step3[condition2]
    step4[condition1] = step2[condition1]
    return SUM(step1 / step4 * step5, 20)
    
def alpha56(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# RANK(OPEN-TSMIN(OPEN,12))<RANK(RANK(CORR(SUM((HIGH +LOW)/2,19),SUM(MEAN(VOLUME,40),19),13))^5)
#这里的符号好像有一点问题，别人写的时候用的是“ - ” !!!。
    return RANK(OPEN-TSMIN(OPEN,12)) < RANK(RANK(CORR(SUM((HIGH +LOW)/2,19),SUM(MEAN(VOLUME,40),19),13)) ** 5)

def alpha57(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SMA((CLOSE-TSMIN(LOW,9))/(TSMAX(HIGH,9)-TSMIN(LOW,9))*100,3,1)
    return SMA((CLOSE-TSMIN(LOW,9))/(TSMAX(HIGH,9)-TSMIN(LOW,9))*100,3,1)

def alpha58(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# COUNT(CLOSE>DELAY(CLOSE,1),20)/20*100
    return COUNT(CLOSE>DELAY(CLOSE,1),20)/20*100

def alpha59(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SUM((CLOSE=DELAY(CLOSE,1)
#  ?0:CLOSE-(CLOSE>DELAY(CLOSE,1)
#   ?MIN(LOW,DELAY(CLOSE,1)):MAX(HIGH,DELAY(CLOSE,1)))),20)
    sr = copy.deepcopy(CLOSE)
    condition1 = CLOSE > DELAY(CLOSE,1)
    condition2 = CLOSE < DELAY(CLOSE,1)
    sr[condition1] = MIN(LOW,DELAY(CLOSE,1))[condition1]
    sr[condition2] = MAX(HIGH,DELAY(CLOSE,1))[condition2]
    return SUM(CLOSE - sr, 20)

def alpha60(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SUM((2*CLOSE-LOW-HIGH)/(HIGH-LOW)*VOLUME,20)
    return SUM((2 * CLOSE-LOW-HIGH) / (HIGH-LOW) * VOLUME,20)

def alpha61(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# MAX(RANK(DECAYLINEAR(DELTA(VWAP,1),12)),RANK(DECAYLINEAR(RANK(CORR(LOW,MEAN(VOLUME,80),8)),17)))*-1
    return MAX(RANK(DECAYLINEAR(DELTA(VWAP,1),12)),RANK(DECAYLINEAR(RANK(CORR(LOW,MEAN(VOLUME,80),8)),17)))*-1
    
def alpha62(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# -1 * CORR(HIGH, RANK(VOLUME), 5)
    return -1 * CORR(HIGH, RANK(VOLUME), 5)

def alpha63(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SMA(MAX(CLOSE-DELAY(CLOSE,1),0),6,1)/SMA(ABS(CLOSE-DELAY(CLOSE,1)),6,1)*100
    return SMA (MAX (CLOSE-DELAY(CLOSE,1),0),6,1) / SMA (ABS( CLOSE - DELAY (CLOSE,1)),6,1) * 100

def alpha64(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (MAX(RANK(DECAYLINEAR(CORR(RANK(VWAP),RANK(VOLUME),4),4)),RANK(DECAYLINEAR(MAX(CORR(RANK(CLOSE),RANK(MEAN(VOLUME,60)),4),13),14)))*-1)
    return (MAX(RANK(DECAYLINEAR(CORR(RANK(VWAP),RANK(VOLUME),4),4)),RANK(DECAYLINEAR(MAX(CORR(RANK(CLOSE),RANK(MEAN(VOLUME,60)),4),13),14)))*-1)

    
for i in range(3, 65):
    exec('a' + str(i)  + '= alpha' + str(i) + '(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN)')
    exec('factors[' + str(i) + '] = a' + str(i))             

#%%
def alpha65(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# MEAN(CLOSE,6)/CLOSE
    return MEAN(CLOSE,6)/CLOSE

def alpha66(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (CLOSE-MEAN(CLOSE,6))/MEAN(CLOSE,6)*100
    return (CLOSE-MEAN(CLOSE,6))/MEAN(CLOSE,6)*100

def alpha67(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SMA(MAX(CLOSE-DELAY(CLOSE,1),0),24,1)/SMA(ABS(CLOSE-DELAY(CLOSE,1)),24,1)*100
    return SMA(MAX(CLOSE-DELAY(CLOSE,1),0),24,1)/SMA(ABS(CLOSE-DELAY(CLOSE,1)),24,1)*100

def alpha68(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SMA(((HIGH+LOW)/2-(DELAY(HIGH,1)+DELAY(LOW,1))/2)*(HIGH-LOW)/VOLUME,15,2)
    return SMA(((HIGH+LOW)/2-(DELAY(HIGH,1)+DELAY(LOW,1))/2)*(HIGH-LOW)/VOLUME,15,2)
    
def alpha69(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
    # DTM: (OPEN<=DELAY(OPEN,1)?0:MAX((HIGH-OPEN),(OPEN-DELAY(OPEN,1))))
    # DBM: (OPEN>=DELAY(OPEN,1)?0:MAX((OPEN-LOW),(OPEN-DELAY(OPEN,1))))
    DTM = pd.Series(np.zeros(len(CLOSE)))
    DTM[OPEN > DELAY(OPEN,1)] = MAX((HIGH-OPEN),(OPEN-DELAY(OPEN,1)))
    DBM = pd.Series(np.zeros(len(CLOSE)))
    DBM[OPEN < DELAY(OPEN,1)] = MAX((OPEN-LOW),(OPEN-DELAY(OPEN,1)))
# (SUM(DTM,20)>SUM(DBM,20)?
#  (SUM(DTM,20)-SUM(DBM,20))/SUM(DTM,20):
#   (SUM(DTM,20)=SUM(DBM,20)?
#    0:(SUM(DTM,20)-SUM(DBM,20))/SUM(DBM,20)))
    sr = pd.Series(np.zeros(len(CLOSE)))
    sr[SUM(DTM,20) > SUM(DBM,20)] = (SUM(DTM,20)-SUM(DBM,20))/SUM(DTM,20)
    sr[SUM(DTM,20) < SUM(DBM,20)] = (SUM(DTM,20)-SUM(DBM,20))/SUM(DBM,20)
    return sr

def alpha70(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# STD(AMOUNT,6)
    return STD(AMOUNT,6)

def alpha71(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (CLOSE-MEAN(CLOSE,24))/MEAN(CLOSE,24)*100
    return (CLOSE-MEAN(CLOSE,24))/MEAN(CLOSE,24)*100
 
def alpha72(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SMA((TSMAX(HIGH,6)-CLOSE)/(TSMAX(HIGH,6)-TSMIN(LOW,6))*100,15,1)
    return SMA((TSMAX(HIGH,6)-CLOSE)/(TSMAX(HIGH,6)-TSMIN(LOW,6))*100,15,1)
    
def alpha73(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# ((TSRANK(DECAYLINEAR(DECAYLINEAR(CORR(CLOSE,VOLUME,10),16),4),5)-RANK(DECAYLINEAR(CORR(VWAP,MEAN(VOLUME,30),4),3)))*-1)
    return ((TSRANK(DECAYLINEAR(DECAYLINEAR(CORR(CLOSE,VOLUME,10),16),4),5)-RANK(DECAYLINEAR(CORR(VWAP,MEAN(VOLUME,30),4),3)))*-1)
    
def alpha74(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# RANK(CORR(SUM(LOW*0.35+VWAP*0.65,20),SUM(MEAN(VOLUME,40),20),7))+RANK(CORR(RANK(VWAP),RANK(VOLUME),6))
    return RANK(CORR(SUM(LOW*0.35+VWAP*0.65,20),SUM(MEAN(VOLUME,40),20),7))+RANK(CORR(RANK(VWAP),RANK(VOLUME),6))

def alpha75(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# 要新数据
# COUNT(CLOSE>OPEN & BANCHMARK_INDEX_CLOSE<BANCHMARK_INDEX_OPEN,50)/COUNT(BANCHMARK_INDEX_CLOSE<BANCHMARK_INDEX_OPEN,50)
    return COUNT((CLOSE>OPEN) & (BANCHMARK_INDEX_CLOSE<BANCHMARK_INDEX_OPEN),50)/COUNT(BANCHMARK_INDEX_CLOSE<BANCHMARK_INDEX_OPEN,50)
    

def alpha76(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# STD(ABS(CLOSE/DELAY(CLOSE,1)-1)/VOLUME,20)/MEAN(ABS(CLOSE/DELAY(CLOSE,1)-1)/VOLUME,20)
    return STD(ABS(CLOSE/DELAY(CLOSE,1)-1)/VOLUME,20)/MEAN(ABS(CLOSE/DELAY(CLOSE,1)-1)/VOLUME,20)

def alpha77(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# MIN(RANK(DECAYLINEAR(HIGH*0.5+LOW*0.5-VWAP,20)),RANK(DECAYLINEAR(CORR(HIGH*0.5+LOW*0.5,MEAN(VOLUME,40),3),6)))
    return MIN(RANK(DECAYLINEAR(HIGH*0.5+LOW*0.5-VWAP,20)),RANK(DECAYLINEAR(CORR(HIGH*0.5+LOW*0.5,MEAN(VOLUME,40),3),6)))

def alpha78(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# ((HIGH+LOW+CLOSE)/3-MA((HIGH+LOW+CLOSE)/3,12))/(0.015*MEAN(ABS(CLOSE-MEAN((HIGH+LOW+CLOSE)/3,12)),12))
# "MA" is not defined, i use "MEAN" here.
    return ((HIGH+LOW+CLOSE)/3-MEAN((HIGH+LOW+CLOSE)/3,12))/(0.015*MEAN(ABS(CLOSE-MEAN((HIGH+LOW+CLOSE)/3,12)),12))

def alpha79(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SMA(MAX(CLOSE-DELAY(CLOSE,1),0),12,1)/SMA(ABS(CLOSE-DELAY(CLOSE,1)),12,1)*100
    return SMA(MAX(CLOSE-DELAY(CLOSE,1),0),12,1)/SMA(ABS(CLOSE-DELAY(CLOSE,1)),12,1)*100

def alpha80(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (VOLUME-DELAY(VOLUME,5))/DELAY(VOLUME,5)*100
    return (VOLUME-DELAY(VOLUME,5))/DELAY(VOLUME,5)*100

def alpha81(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SMA(VOLUME,21,2)
    return SMA(VOLUME,21,2)
    
def alpha82(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SMA((TSMAX(HIGH,6)-CLOSE)/(TSMAX(HIGH,6)-TSMIN(LOW,6))*100,20,1)
    return SMA((TSMAX(HIGH,6)-CLOSE)/(TSMAX(HIGH,6)-TSMIN(LOW,6))*100,20,1)

# for i in range(65, 83):
#     exec('a' + str(i)  + '= alpha' + str(i) + '(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN)')
#     exec('factors[' + str(i) + '] = a' + str(i)) 
# #%%
def alpha83(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (-1*RANK(COVIANCE(RANK(HIGH),RANK(VOLUME),5)))
    return (-1*RANK(COVIANCE(RANK(HIGH),RANK(VOLUME),5)))
 
def alpha84(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SUM((CLOSE>DELAY(CLOSE,1)
#  ?VOLUME:
#    (CLOSE<DELAY(CLOSE,1)?-VOLUME:0)),20)
    sr = pd.Series(np.zeros(len(CLOSE)))
    sr[CLOSE > DELAY(CLOSE,1)] = VOLUME
    sr[CLOSE < DELAY(CLOSE,1)] = -1 * VOLUME
    return SUM(sr, 20)

def alpha85(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# TSRANK(VOLUME/MEAN(VOLUME,20),20)*TSRANK(a-1*DELTA(CLOSE,7),8)
    return TSRANK(VOLUME/MEAN(VOLUME,20),20)*TSRANK(-1*DELTA(CLOSE,7),8)

def alpha86(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# ((0.25<((DELAY(CLOSE,20)-DELAY(CLOSE,10))/10-(DELAY(CLOSE,10)-CLOSE)/10))
#  ? -1:((((DELAY(CLOSE,20)-DELAY(CLOSE,10))/10-(DELAY(CLOSE,10)-CLOSE)/10)<0)
#   ? 1:(DELAY(CLOSE,1)-CLOSE)))
    condition1 = 0.25 < ((DELAY(CLOSE,20)-DELAY(CLOSE,10))/10-(DELAY(CLOSE,10)-CLOSE)/10)
    condition2 = (DELAY(CLOSE,20)-DELAY(CLOSE,10))/10-(DELAY(CLOSE,10)-CLOSE)/10 < 0
    sr = DELAY(CLOSE,1) - CLOSE
    sr[condition1] = -1
    sr[condition2] = 1
    return sr

def alpha87(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (RANK(DECAYLINEAR(DELTA(VWAP,4),7))+TSRANK(DECAYLINEAR((LOW-VWAP)/(OPEN-(HIGH+LOW)/2),11),7))*-1
    return (RANK(DECAYLINEAR(DELTA(VWAP,4),7)) + TSRANK(DECAYLINEAR((LOW-VWAP)/(OPEN-(HIGH+LOW)/2),11),7)) * -1

def alpha88(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (CLOSE-DELAY(CLOSE,20))/DELAY(CLOSE,20)*100
    return (CLOSE-DELAY(CLOSE,20))/DELAY(CLOSE,20)*100

def alpha89(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# 2*(SMA(CLOSE,13,2)-SMA(CLOSE,27,2)-SMA(SMA(CLOSE,13,2)-SMA(CLOSE,27,2),10,2))
    return 2*(SMA(CLOSE,13,2)-SMA(CLOSE,27,2)-SMA(SMA(CLOSE,13,2)-SMA(CLOSE,27,2),10,2))

def alpha90(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (RANK(CORR(RANK(VWAP),RANK(VOLUME),5))*-1)
    return RANK(CORR(RANK(VWAP),RANK(VOLUME),5)) * -1

def alpha91(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (RANK(CLOSE-MAX(CLOSE,5))*RANK(CORR(MEAN(VOLUME,40),LOW,5)))*-1
    return (RANK(CLOSE-MAX(CLOSE,5))*RANK(CORR(MEAN(VOLUME,40),LOW,5)))*-1

def alpha92(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (MAX(RANK(DECAYLINEAR(DELTA(CLOSE*0.35+VWAP*0.65,2),3)),TSRANK(DECAYLINEAR(ABS(CORR((MEAN(VOLUME,180)),CLOSE,13)),5),15))*-1)
    return (MAX(RANK(DECAYLINEAR(DELTA(CLOSE*0.35+VWAP*0.65,2),3)),TSRANK(DECAYLINEAR(ABS(CORR((MEAN(VOLUME,180)),CLOSE,13)),5),15))*-1)

def alpha93(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SUM(OPEN>=DELAY(OPEN,1)
#  ?0:MAX(OPEN-LOW,OPEN-DELAY(OPEN,1)),20)
    sr = pd.Series(np.zeros(len(CLOSE)))
    sr[OPEN < DELAY(OPEN,1)] = MAX(OPEN-LOW,OPEN-DELAY(OPEN,1))
    return SUM(sr, 20)

def alpha94(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SUM((CLOSE>DELAY(CLOSE,1)
#  ?VOLUME:(CLOSE<DELAY(CLOSE,1)?-VOLUME:0)),30)
    sr = pd.Series(np.zeros(len(CLOSE)))
    sr[CLOSE > DELAY(CLOSE,1)] = VOLUME
    sr[CLOSE < DELAY(CLOSE,1)] = -1 * VOLUME
    return SUM(sr, 30)

def alpha95(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# STD(AMOUNT,20)
    return STD(AMOUNT,20)

def alpha96(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SMA(SMA((CLOSE-TSMIN(LOW,9))/(TSMAX(HIGH,9)-TSMIN(LOW,9))*100,3,1),3,1)
    return SMA(SMA((CLOSE-TSMIN(LOW,9))/(TSMAX(HIGH,9)-TSMIN(LOW,9))*100,3,1),3,1)

def alpha97(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# STD(VOLUME,10)
    return STD(VOLUME,10)

for i in range(65, 98):
    exec('a' + str(i)  + '= alpha' + str(i) + '(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN)')
    exec('factors[' + str(i) + '] = a' + str(i)) 
    
#%%
def alpha98(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (DELTA(SUM(CLOSE,100)/100,100)/DELAY(CLOSE,100)<=0.05)
#   ?(-1*(CLOSE-TSMIN(CLOSE,100))):(-1*DELTA(CLOSE,3))
    sr = copy.deepcopy(-1 * DELTA(CLOSE,3))
    sr[DELTA(SUM(CLOSE,100)/100,100)/DELAY(CLOSE,100) <= 0.05] = (-1*(CLOSE-TSMIN(CLOSE,100)))[DELTA(SUM(CLOSE,100)/100,100)/DELAY(CLOSE,100) <= 0.05]
    return sr

def alpha99(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (-1*RANK(COVIANCE(RANK(CLOSE),RANK(VOLUME),5)))
    return -1 * RANK(COVIANCE(RANK(CLOSE),RANK(VOLUME),5))

def alpha100(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# STD(VOLUME,20)
    return STD(VOLUME,20)

def alpha101(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
    #!!!
# (RANK(CORR(CLOSE,SUM(MEAN(VOLUME,30),37),15)) < RANK(CORR(RANK(HIGH*0.1+VWAP*0.9),RANK(VOLUME),11)))*-1
    return (RANK(CORR(CLOSE,SUM(MEAN(VOLUME,30),37),15)) < RANK(CORR(RANK(HIGH*0.1+VWAP*0.9),RANK(VOLUME),11)))*-1

def alpha102(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SMA(MAX(VOLUME-DELAY(VOLUME,1),0),6,1)/SMA(ABS(VOLUME-DELAY(VOLUME,1)),6,1)*100
    return SMA(MAX(VOLUME-DELAY(VOLUME,1),0),6,1)/SMA(ABS(VOLUME-DELAY(VOLUME,1)),6,1)*100

def alpha103(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# ((20-LOWDAY(LOW,20))/20)*100
    return ((20-LOWDAY(LOW,20))/20)*100

def alpha104(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# -1*DELTA(CORR(HIGH,VOLUME,5),5)*RANK(STD(CLOSE,20))
    return -1*DELTA(CORR(HIGH,VOLUME,5),5)*RANK(STD(CLOSE,20))

def alpha105(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# -1*CORR(RANK(OPEN),RANK(VOLUME),10)
    return -1*CORR(RANK(OPEN),RANK(VOLUME),10)

def alpha106(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# CLOSE-DELAY(CLOSE,20)
    return CLOSE-DELAY(CLOSE,20)

def alpha107(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (-1*RANK(OPEN-DELAY(HIGH,1)))*RANK(OPEN-DELAY(CLOSE,1))*RANK(OPEN-DELAY(LOW,1))
    return -1 * RANK(OPEN-DELAY(HIGH,1)) * RANK(OPEN-DELAY(CLOSE,1)) * RANK(OPEN-DELAY(LOW,1))

def alpha108(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (RANK(HIGH-MIN(HIGH,2))^RANK(CORR(VWAP,MEAN(VOLUME,120),6)))*-1
    return (RANK(HIGH-MIN(HIGH,2)) ** RANK(CORR(VWAP,MEAN(VOLUME,120),6)))*-1

def alpha109(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SMA(HIGH-LOW,10,2)/SMA(SMA(HIGH-LOW,10,2),10,2)
    return SMA(HIGH-LOW,10,2)/SMA(SMA(HIGH-LOW,10,2),10,2)

def alpha110(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SUM(MAX(0,HIGH-DELAY(CLOSE,1)),20)/SUM(MAX(0,DELAY(CLOSE,1)-LOW),20)*100
    return SUM(MAX(HIGH-DELAY(CLOSE,1), 0),20)/SUM(MAX(DELAY(CLOSE,1)-LOW, 0),20)*100

def alpha111(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SMA(VOL*(2*CLOSE-LOW-HIGH)/(HIGH-LOW),11,2)-SMA(VOL*(2*CLOSE-LOW-HIGH)/(HIGH-LOW),4,2)
# !!! VOL here may be VLOUME
    return SMA(VOLUME*(2*CLOSE-LOW-HIGH)/(HIGH-LOW),11,2)-SMA(VOLUME*(2*CLOSE-LOW-HIGH)/(HIGH-LOW),4,2)

def alpha112(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (SUM((CLOSE-DELAY(CLOSE,1)>0 ? CLOSE-DELAY(CLOSE,1):0),12)
#   -SUM((CLOSE-DELAY(CLOSE,1)<0 ? ABS(CLOSE-DELAY(CLOSE,1)):0),12))
# /(SUM((CLOSE-DELAY(CLOSE,1)>0 ? CLOSE-DELAY(CLOSE,1):0),12)
#   +SUM((CLOSE-DELAY(CLOSE,1)<0 ? ABS(CLOSE-DELAY(CLOSE,1)):0),12))*100
    condition1 = CLOSE-DELAY(CLOSE,1) > 0
    condition2 = CLOSE-DELAY(CLOSE,1) < 0
    sr1 = pd.Series(np.zeros(len(CLOSE)))
    sr2 = pd.Series(np.zeros(len(CLOSE)))
    sr1[condition1] = CLOSE-DELAY(CLOSE,1)
    sr2[condition2] = ABS(CLOSE-DELAY(CLOSE,1))
    return (SUM(sr1, 12) - SUM(sr2, 12)) / (SUM(sr1, 12) + SUM(sr2, 12))  

def alpha113(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# -1*RANK(SUM(DELAY(CLOSE,5),20)/20)*CORR(CLOSE,VOLUME,2)*RANK(CORR(SUM(CLOSE,5),SUM(CLOSE,20),2))
    return -1 * RANK(SUM(DELAY(CLOSE,5),20)/20) * CORR(CLOSE,VOLUME,2) * RANK(CORR(SUM(CLOSE,5),SUM(CLOSE,20),2))

def alpha114(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# RANK(DELAY((HIGH-LOW)/(SUM(CLOSE,5)/5),2))*RANK(RANK(VOLUME))/((HIGH-LOW)/(SUM(CLOSE,5)/5)/(VWAP-CLOSE))
    return RANK(DELAY((HIGH-LOW)/(SUM(CLOSE,5)/5),2))*RANK(RANK(VOLUME))/((HIGH-LOW)/(SUM(CLOSE,5)/5)/(VWAP-CLOSE))

def alpha115(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (RANK(CORR(HIGH*0.9+CLOSE*0.1,MEAN(VOLUME,30),10))^RANK(CORR(TSRANK((HIGH+LOW)/2,4),TSRANK(VOLUME,10),7)))
    return RANK(CORR(HIGH*0.9+CLOSE*0.1,MEAN(VOLUME,30),10)) ** RANK(CORR(TSRANK((HIGH+LOW)/2,4),TSRANK(VOLUME,10),7))

def alpha116(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# REGBETA(CLOSE,SEQUENCE,20)
    return REGBETA(CLOSE,SEQUENCE(20),20)

def alpha117(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# TSRANK(VOLUME,32)*(1-TSRANK(CLOSE+HIGH-LOW,16))*(1-TSRANK(RET,32))
    return TSRANK(VOLUME,32)*(1-TSRANK(CLOSE+HIGH-LOW,16))*(1-TSRANK(RET,32))

def alpha118(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SUM(HIGH-OPEN,20)/SUM(OPEN-LOW,20)*100
    return SUM(HIGH-OPEN,20)/SUM(OPEN-LOW,20)*100

def alpha119(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# RANK(DECAYLINEAR(CORR(VWAP,SUM(MEAN(VOLUME,5),26),5),7))-RANK(DECAYLINEAR(TSRANK(MIN(CORR(RANK(OPEN),RANK(MEAN(VOLUME,15)),21),9),7),8))
    return RANK(DECAYLINEAR(CORR(VWAP,SUM(MEAN(VOLUME,5),26),5),7)) - RANK(DECAYLINEAR(TSRANK(MIN(CORR(RANK(OPEN),RANK(MEAN(VOLUME,15)),21),9),7),8))
  
def alpha120(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# RANK(VWAP-CLOSE)/RANK(VWAP+CLOSE)
    return RANK(VWAP-CLOSE)/RANK(VWAP+CLOSE)

def alpha121(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (RANK(VWAP-MIN(VWAP,12))^TSRANK(CORR(TSRANK(VWAP,20),TSRANK(MEAN(VOLUME,60),2),18),3))*-1
    return (RANK(VWAP-MIN(VWAP,12)) ** TSRANK(CORR(TSRANK(VWAP,20),TSRANK(MEAN(VOLUME,60),2),18),3))*-1

def alpha122(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (SMA(SMA(SMA(LOG(CLOSE),13,2),13,2),13,2)-DELAY(SMA(SMA(SMA(LOG(CLOSE),13,2),13,2),13,2),1))/DELAY(SMA(SMA(SMA(LOG(CLOSE),13,2),13,2),13,2),1)
    return (SMA(SMA(SMA(LOG(CLOSE),13,2),13,2),13,2)-DELAY(SMA(SMA(SMA(LOG(CLOSE),13,2),13,2),13,2),1))/DELAY(SMA(SMA(SMA(LOG(CLOSE),13,2),13,2),13,2),1)

def alpha123(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (RANK(CORR(SUM((HIGH+LOW)/2,20),SUM(MEAN(VOLUME,60),20),9)) < RANK(CORR(LOW,VOLUME,6)))*-1
    return (RANK(CORR(SUM((HIGH+LOW)/2,20),SUM(MEAN(VOLUME,60),20),9)) < RANK(CORR(LOW,VOLUME,6)))*-1

def alpha124(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (CLOSE-VWAP)/DECAYLINEAR(RANK(TSMAX(CLOSE,30)),2)
    return (CLOSE-VWAP)/DECAYLINEAR(RANK(TSMAX(CLOSE,30)),2)

def alpha125(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# RANK(DECAYLINEAR(CORR(VWAP,MEAN(VOLUME,80),17),20))/RANK(DECAYLINEAR(DELTA(CLOSE*0.5+VWAP*0.5,3),16))
    return RANK(DECAYLINEAR(CORR(VWAP,MEAN(VOLUME,80),17),20))/RANK(DECAYLINEAR(DELTA(CLOSE*0.5+VWAP*0.5,3),16))

def alpha126(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (CLOSE+HIGH+LOW)/3
    return (CLOSE+HIGH+LOW)/3

def alpha127(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# MEAN((100*(CLOSE-MAX(CLOSE,12))/MAX(CLOSE,12))^2)^(1/2)
#!!! mean missing "n", i use 12
    return MEAN((100*(CLOSE-MAX(CLOSE,12))/MAX(CLOSE,12)) ** 2, 12) ** (1/2)
    
def alpha128(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# 100-(100/(1+SUM(((HIGH+LOW+CLOSE)/3>DELAY((HIGH+LOW+CLOSE)/3,1)
#  ? (HIGH+LOW+CLOSE)/3*VOLUME: 0),14)

# /SUM(((HIGH+LOW+CLOSE)/3<DELAY((HIGH+LOW+CLOSE)/3,1)
#  ? (HIGH+LOW+CLOSE)/3*VOLUME :0),14)))
    condition1 = (HIGH+LOW+CLOSE)/3 > DELAY((HIGH+LOW+CLOSE)/3,1)
    condition2 = (HIGH+LOW+CLOSE)/3 < DELAY((HIGH+LOW+CLOSE)/3,1)
    sr1 = pd.Series(np.zeros(len(CLOSE)))
    sr2 = pd.Series(np.zeros(len(CLOSE)))
    sr1[condition1] = (HIGH+LOW+CLOSE)/3 * VOLUME
    sr2[condition2] = (HIGH+LOW+CLOSE)/3 * VOLUME
    return 100 - (100 / (1 + SUM(sr1, 14) / SUM(sr2, 14)))

def alpha129(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SUM((CLOSE-DELAY(CLOSE,1)<0
#  ? ABS(CLOSE-DELAY(CLOSE,1)):0),12)
    sr = pd.Series(np.zeros(len(CLOSE)))
    sr[CLOSE-DELAY(CLOSE,1) < 0] = ABS(CLOSE-DELAY(CLOSE,1))
    return SUM(sr, 12)

def alpha130(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (RANK(DECAYLINEAR(CORR((HIGH+LOW)/2,MEAN(VOLUME,40),9),10))/RANK(DECAYLINEAR(CORR(RANK(VWAP),RANK(VOLUME),7),3)))
    return (RANK(DECAYLINEAR(CORR((HIGH+LOW)/2,MEAN(VOLUME,40),9),10))/RANK(DECAYLINEAR(CORR(RANK(VWAP),RANK(VOLUME),7),3)))

def alpha131(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (RANK(DELAT(VWAP,1))^TSRANK(CORR(CLOSE,MEAN(VOLUME,50),18),18))
#!!! DELAT DNE, maybe DELTA
    return (RANK(DELTA(VWAP,1)) ** TSRANK(CORR(CLOSE,MEAN(VOLUME,50),18),18))

def alpha132(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# MEAN(AMOUNT,20)
    return MEAN(AMOUNT,20)

def alpha133(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# ((20-HIGHDAY(HIGH,20))/20)*100-((20-LOWDAY(LOW,20))/20)*100
    return ((20-HIGHDAY(HIGH,20))/20)*100-((20-LOWDAY(LOW,20))/20)*100

def alpha134(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (CLOSE-DELAY(CLOSE,12))/DELAY(CLOSE,12)*VOLUME
    return (CLOSE-DELAY(CLOSE,12))/DELAY(CLOSE,12)*VOLUME

def alpha135(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SMA(DELAY(CLOSE/DELAY(CLOSE,20),1),20,1)
    return SMA(DELAY(CLOSE/DELAY(CLOSE,20),1),20,1)

def alpha136(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# -1*RANK(DELTA(RET,3))*CORR(OPEN,VOLUME,10)
    return -1*RANK(DELTA(RET,3))*CORR(OPEN,VOLUME,10)

for i in range(98, 137):
    exec('a' + str(i)  + '= alpha' + str(i) + '(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN)')
    exec('factors[' + str(i) + '] = a' + str(i)) 
#%%
def alpha137(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# 16*(CLOSE+(CLOSE-OPEN)/2-DELAY(OPEN,1))/
# ((ABS(HIGH-DELAY(CLOSE,1))>ABS(LOW-DELAY(CLOSE,1)) & ABS(HIGH-DELAY(CLOSE,1))>ABS(HIGH-DELAY(LOW,1))
#  ? ABS(HIGH-DELAY(CLOSE,1))+ABS(LOW-DELAY(CLOSE,1))/2+ABS(DELAY(CLOSE,1)-DELAY(OPEN,1))/4
#   : (ABS(LOW-DELAY(CLOSE,1))>ABS(HIGH-DELAY(LOW,1)) & ABS(LOW-DELAY(CLOSE,1))>ABS(HIGH-DELAY(CLOSE,1))
#    ? ABS(LOW-DELAY(CLOSE,1))+ABS(HIGH-DELAY(CLOSE,1))/2+ABS(DELAY(CLOSE,1)-DELAY(OPEN,1))/4
#     : ABS(HIGH-DELAY(LOW,1))+ABS(DELAY(CLOSE,1)-DELAY(OPEN,1))/4)))
# *MAX(ABS(HIGH-DELAY(CLOSE,1)),ABS(LOW-DELAY(CLOSE,1)))
    condition1 = (ABS(HIGH-DELAY(CLOSE,1))>ABS(LOW-DELAY(CLOSE,1))) & (ABS(HIGH-DELAY(CLOSE,1))>ABS(HIGH-DELAY(LOW,1)))
    condition2 = (ABS(LOW-DELAY(CLOSE,1))>ABS(HIGH-DELAY(LOW,1))) & (ABS(LOW-DELAY(CLOSE,1))>ABS(HIGH-DELAY(CLOSE,1)))
    sr = copy.deepcopy(ABS(HIGH-DELAY(LOW,1))+ABS(DELAY(CLOSE,1)-DELAY(OPEN,1))/4)
    sr[condition2] = ABS(LOW-DELAY(CLOSE,1))+ABS(HIGH-DELAY(CLOSE,1))/2+ABS(DELAY(CLOSE,1)-DELAY(OPEN,1))/4
    sr[condition1] = ABS(HIGH-DELAY(CLOSE,1))+ABS(LOW-DELAY(CLOSE,1))/2+ABS(DELAY(CLOSE,1)-DELAY(OPEN,1))/4
    return 16*(CLOSE+(CLOSE-OPEN)/2-DELAY(OPEN,1)) / sr * MAX(ABS(HIGH-DELAY(CLOSE,1)),ABS(LOW-DELAY(CLOSE,1)))

def alpha138(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# ((RANK(DECAYLINEAR(DELTA(LOW*0.7+VWAP*0.3,3),20))-TSRANK(DECAYLINEAR(TSRANK(CORR(TSRANK(LOW,8),TSRANK(MEAN(VOLUME,60),17),5),19),16),7))* -1)
    return ((RANK(DECAYLINEAR(DELTA(LOW*0.7+VWAP*0.3,3),20))-TSRANK(DECAYLINEAR(TSRANK(CORR(TSRANK(LOW,8),TSRANK(MEAN(VOLUME,60),17),5),19),16),7))* -1)
    
def alpha139(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (-1*CORR(OPEN,VOLUME,10))
    return (-1*CORR(OPEN,VOLUME,10))

def alpha140(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# MIN(RANK(DECAYLINEAR(RANK(OPEN)+RANK(LOW)-RANK(HIGH)-RANK(CLOSE),8)),TSRANK(DECAYLINEAR(CORR(TSRANK(CLOSE,8),TSRANK(MEAN(VOLUME,60),20),8),7),3))
    return MIN(RANK(DECAYLINEAR(RANK(OPEN)+RANK(LOW)-RANK(HIGH)-RANK(CLOSE),8)),TSRANK(DECAYLINEAR(CORR(TSRANK(CLOSE,8),TSRANK(MEAN(VOLUME,60),20),8),7),3))

def alpha141(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (RANK(CORR(RANK(HIGH),RANK(MEAN(VOLUME,15)),9))*-1)
    return (RANK(CORR(RANK(HIGH),RANK(MEAN(VOLUME,15)),9))*-1)

def alpha142(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# -1*RANK(TSRANK(CLOSE,10))*RANK(DELTA(DELTA(CLOSE,1),1))*RANK(TSRANK(VOLUME/MEAN(VOLUME,20),5))
    return -1 * RANK(TSRANK(CLOSE,10)) * RANK(DELTA(DELTA(CLOSE,1),1)) * RANK(TSRANK(VOLUME/MEAN(VOLUME,20),5))

def alpha143(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# CLOSE>DELAY(CLOSE,1)?(CLOSE-DELAY(CLOSE,1))/DELAY(CLOSE,1) * SELF : SELF

    pass

def alpha144(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SUMIF(ABS(CLOSE/DELAY(CLOSE,1)-1)/AMOUNT,20,CLOSE<DELAY(CLOSE,1))/COUNT(CLOSE<DELAY(CLOSE,1),20)
    return SUMIF(ABS(CLOSE/DELAY(CLOSE,1)-1)/AMOUNT,20,CLOSE<DELAY(CLOSE,1))/COUNT(CLOSE<DELAY(CLOSE,1),20)
   
def alpha145(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (MEAN(VOLUME,9)-MEAN(VOLUME,26))/MEAN(VOLUME,12)*100
    return (MEAN(VOLUME,9)-MEAN(VOLUME,26))/MEAN(VOLUME,12)*100

def alpha146(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
    #!!! missing one parameter in SMA
# MEAN(RET-SMA(RET,61,2),20)*(RET-SMA(RET,61,2))/SMA(SMA(RET,61,2)^2,60)
    return MEAN(RET-SMA(RET,61,2),20)*(RET-SMA(RET,61,2))/SMA(SMA(RET,61,2)**2,60,1)
# MEAN((CLOSE - DELAY(CLOSE,1))/DELAY(CLOSE,1) - SMA((CLOSE - DELAY(CLOSE,1))/DELAY(CLOSE,1),61,2),20)*
# ((CLOSE - DELAY(CLOSE,1))/DELAY(CLOSE,1) - SMA((CLOSE DELAY(CLOSE,1))/DELAY(CLOSE,1),61,2))/
# SMA(((CLOSE - DELAY(CLOSE,1))/DELAY (CLOSE, 1) - 
# ((CLOSE - DELAY(CLOSE,1))/DELAY(CLOSE,1) - SMA((CLOSE DELAY(CLOSE,1))/DELAY(CLOSE,1),61,2)))**2,60)
    # part1 = MEAN((CLOSE - DELAY(CLOSE,1))/DELAY(CLOSE,1) - SMA((CLOSE - DELAY(CLOSE,1))/DELAY(CLOSE,1),61,2),20)
    # part2 = ((CLOSE - DELAY(CLOSE,1))/DELAY(CLOSE,1) - SMA((CLOSE - DELAY(CLOSE,1))/DELAY(CLOSE,1),61,2))
    # return MEAN(part1)
    # return MEAN((CLOSE - DELAY(CLOSE,1))/DELAY(CLOSE,1) - SMA((CLOSE - DELAY(CLOSE,1))/DELAY(CLOSE,1),61,2),20)*((CLOSE - DELAY(CLOSE,1))/DELAY(CLOSE,1) - SMA((CLOSE - DELAY(CLOSE,1))/DELAY(CLOSE,1),61,2))/SMA(((CLOSE - DELAY(CLOSE,1))/DELAY (CLOSE, 1) - ((CLOSE - DELAY(CLOSE,1))/DELAY(CLOSE,1) - SMA((CLOSE - DELAY(CLOSE,1))/DELAY(CLOSE,1),61,2)))**2,60)


def alpha147(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# REGBETA(MEAN(CLOSE,12),SEQUENCE(12))
    return REGBETA(MEAN(CLOSE,12),SEQUENCE(12),12)

def alpha148(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (RANK(CORR(OPEN,SUM(MEAN(VOLUME,60),9),6))<RANK(OPEN-TSMIN(OPEN,14)))*-1
    return (RANK(CORR(OPEN,SUM(MEAN(VOLUME,60),9),6)) < RANK(OPEN-TSMIN(OPEN,14)))*-1
    
def alpha149(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
    #！！！
    condition = BANCHMARK_INDEX_CLOSE >= DELAY(BANCHMARK_INDEX_CLOSE,1)
    part1 = CLOSE/DELAY(CLOSE,1)-1
    part2 = BANCHMARK_INDEX_CLOSE/DELAY(BANCHMARK_INDEX_CLOSE,1)-1
    part1[condition] = np.nan
    part2[condition] = np.nan
    return REGBETA_1(part1, part2, 252)

    
def alpha150(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (CLOSE+HIGH+LOW)/3*VOLUME
    return (CLOSE+HIGH+LOW)/3*VOLUME

def alpha151(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SMA(CLOSE-DELAY(CLOSE,20),20,1)
    return SMA(CLOSE-DELAY(CLOSE,20),20,1)

def alpha152(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# DELAY(SMA(DELAY(CLOSE/DELAY(CLOSE,9),1),9,1),1) - SMA(MEAN(A,12)-MEAN(A,26),9,1)
    A=DELAY(SMA(DELAY(CLOSE/DELAY(CLOSE,9),1),9,1),1)
    return SMA(MEAN(A,12)-MEAN(A,26),9,1)
    
def alpha153(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (MEAN(CLOSE,3)+MEAN(CLOSE,6)+MEAN(CLOSE,12)+MEAN(CLOSE,24))/4
    return (MEAN(CLOSE,3)+MEAN(CLOSE,6)+MEAN(CLOSE,12)+MEAN(CLOSE,24))/4

def alpha154(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (VWAP-MIN(VWAP,16))<CORR(VWAP,MEAN(VOLUME,180),18)
#!!! binary
    return (VWAP-MIN(VWAP,16))<CORR(VWAP,MEAN(VOLUME,180),18)

def alpha155(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SMA(VOLUME,13,2)-SMA(VOLUME,27,2)-SMA(SMA(VOLUME,13,2)-SMA(VOLUME,27,2),10,2)
    return SMA(VOLUME,13,2)-SMA(VOLUME,27,2)-SMA(SMA(VOLUME,13,2)-SMA(VOLUME,27,2),10,2)

def alpha156(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# MAX(RANK(DECAYLINEAR(DELTA(VWAP,5),3)),RANK(DECAYLINEAR((DELTA(OPEN*0.15+LOW*0.85,2)/(OPEN*0.15+LOW*0.85)) * -1,3))) * -1
    return MAX(RANK(DECAYLINEAR(DELTA(VWAP,5),3)),RANK(DECAYLINEAR((DELTA(OPEN*0.15+LOW*0.85,2)/(OPEN*0.15+LOW*0.85)) * -1,3))) * -1

def alpha157(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# MIN(PROD(RANK(LOG(SUM(TSMIN(RANK(-1*RANK(DELTA(CLOSE-1,5))),2),1))),1),5) +TSRANK(DELAY(-1*RET,6),5)
#!!!! prod 包括今天吗？？？ 
    return MIN(PROD(RANK(LOG(SUM(TSMIN(RANK(-1*RANK(DELTA(CLOSE-1,5))),2),1))),1),5) + TSRANK(DELAY(-1*RET,6),5)
    

def alpha158(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (HIGH-LOW)/CLOSE
    return (HIGH-LOW)/CLOSE

def alpha159(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# ((CLOSE-SUM(MIN(LOW,DELAY(CLOSE,1)),6))/SUM(MAX(HGIH,DELAY(CLOSE,1))-MIN(LOW,DELAY(CLOSE,1)),6)*12*24
# +(CLOSE-SUM(MIN(LOW,DELAY(CLOSE,1)),12))/SUM(MAX(HGIH,DELAY(CLOSE,1))-MIN(LOW,DELAY(CLOSE,1)),12)*6*24
# +(CLOSE-SUM(MIN(LOW,DELAY(CLOSE,1)),24))/SUM(MAX(HGIH,DELAY(CLOSE,1))-MIN(LOW,DELAY(CLOSE,1)),24)*6*24)*100/(6*12+6*24+12*24)
    return ((CLOSE-SUM(MIN(LOW,DELAY(CLOSE,1)),6))/SUM(MAX(HIGH,DELAY(CLOSE,1))-MIN(LOW,DELAY(CLOSE,1)),6)*12*24+(CLOSE-SUM(MIN(LOW,DELAY(CLOSE,1)),12))/SUM(MAX(HIGH,DELAY(CLOSE,1))-MIN(LOW,DELAY(CLOSE,1)),12)*6*24+(CLOSE-SUM(MIN(LOW,DELAY(CLOSE,1)),24))/SUM(MAX(HIGH,DELAY(CLOSE,1))-MIN(LOW,DELAY(CLOSE,1)),24)*6*24)*100/(6*12+6*24+12*24)
    
def alpha160(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SMA((CLOSE<=DELAY(CLOSE,1)?STD(CLOSE,20):0),20,1)
    sr = STD(CLOSE,20)
    sr[CLOSE > DELAY(CLOSE,1)] = 0
    return SMA(sr, 20, 1)

def alpha161(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# MEAN(MAX(MAX(HIGH-LOW,ABS(DELAY(CLOSE,1)-HIGH)),ABS(DELAY(CLOSE,1)-LOW)),12)
    return MEAN(MAX(MAX(HIGH-LOW,ABS(DELAY(CLOSE,1)-HIGH)),ABS(DELAY(CLOSE,1)-LOW)),12)

for i in range(137, 162):
    exec('a' + str(i)  + '= alpha' + str(i) + '(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN)')
    exec('factors[' + str(i) + '] = a' + str(i)) 
    
#%%
def alpha162(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (SMA(MAX(CLOSE-DELAY(CLOSE,1),0),12,1)/SMA(ABS(CLOSE-DELAY(CLOSE,1)),12,1)*100
# -MIN(SMA(MAX(CLOSE-DELAY(CLOSE,1),0),12,1)/SMA(ABS(CLOSE-DELAY(CLOSE,1)),12,1)*100,12))
# /(MAX(SMA(MAX(CLOSE-DELAY(CLOSE,1),0),12,1)/SMA(ABS(CLOSE-DELAY(CLOSE,1)),12,1)*100,12)
# -MIN(SMA(MAX(CLOSE-DELAY(CLOSE,1),0),12,1)/SMA(ABS(CLOSE-DELAY(CLOSE,1)),12,1)*100,12))
    part1 = (SMA(MAX(CLOSE-DELAY(CLOSE,1),0),12,1)/SMA(ABS(CLOSE-DELAY(CLOSE,1)),12,1)*100 - MIN(SMA(MAX(CLOSE-DELAY(CLOSE,1),0),12,1)/SMA(ABS(CLOSE-DELAY(CLOSE,1)),12,1)*100,12))
    part2 = (MAX(SMA(MAX(CLOSE-DELAY(CLOSE,1),0),12,1)/SMA(ABS(CLOSE-DELAY(CLOSE,1)),12,1)*100,12) / MIN(SMA(MAX(CLOSE-DELAY(CLOSE,1),0),12,1)/SMA(ABS(CLOSE-DELAY(CLOSE,1)),12,1)*100,12))   
    return part1 / part2

def alpha163(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# RANK((-1*RET)*MEAN(VOLUME,20)*VWAP*(HIGH-CLOSE))
    return RANK((-1*RET)*MEAN(VOLUME,20)*VWAP*(HIGH-CLOSE))

def alpha164(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SMA(((CLOSE>DELAY(CLOSE,1)
#  ? 1/(CLOSE-DELAY(CLOSE,1)):1)
#   - MIN(CLOSE>DELAY(CLOSE,1) ? 1/(CLOSE-DELAY(CLOSE,1)):1,12))
#    /(HIGH-LOW)*100,13,2)
    sr = pd.Series(np.ones(len(CLOSE)))
    condition = CLOSE > DELAY(CLOSE,1) 
    sr[condition] = 1/(CLOSE-DELAY(CLOSE,1))
    return SMA(sr - MIN(sr, 12) / (HIGH-LOW)*100, 13, 2)
    
def alpha165(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# MAX(SUMAC(CLOSE-MEAN(CLOSE,48)))-MIN(SUMAC(CLOSE-MEAN(CLOSE,48)))/STD(CLOSE,48)
    return SUMAC_MAX(SUMAC(CLOSE-MEAN(CLOSE,48)))-SUMAC_MIN(SUMAC(CLOSE-MEAN(CLOSE,48)))/STD(CLOSE,48)

def alpha166(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# -20*(20-1)^1.5*SUM(CLOSE/DELAY(CLOSE,1)-1-MEAN(CLOSE/DELAY(CLOSE,1)-1,20),20)/((20-1)*(20-2)*(SUM((CLOSE/DELAY(CLOSE,1))^2,20))^1.5)
    return -20 * (20-1) ** 1.5 * SUM(CLOSE/DELAY(CLOSE,1)-1-MEAN(CLOSE/DELAY(CLOSE,1)-1,20),20)/((20-1)*(20-2)*(SUM((CLOSE/DELAY(CLOSE,1)) ** 2,20)) ** 1.5)
 
def alpha167(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SUM(CLOSE-DELAY(CLOSE,1)>0 ? CLOSE-DELAY(CLOSE,1):0,12)
    sr = pd.Series(np.zeros(len(CLOSE)))
    condition = CLOSE > DELAY(CLOSE,1) 
    sr[condition] = CLOSE-DELAY(CLOSE,1)
    return SUM(sr, 12)
 
def alpha168(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# -1*VOLUME/MEAN(VOLUME,20)
    return -1*VOLUME/MEAN(VOLUME,20)

def alpha169(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SMA(MEAN(DELAY(SMA(CLOSE-DELAY(CLOSE,1),9,1),1),12)-MEAN(DELAY(SMA(CLOSE-DELAY(CLOSE,1),9,1),1),26),10,1)
    return SMA(MEAN(DELAY(SMA(CLOSE-DELAY(CLOSE,1),9,1),1),12)-MEAN(DELAY(SMA(CLOSE-DELAY(CLOSE,1),9,1),1),26),10,1)

def alpha170(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# ((RANK(1/CLOSE)*VOLUME)/MEAN(VOLUME,20))*(HIGH*RANK(HIGH-CLOSE)/(SUM(HIGH,5)/5))-RANK(VWAP-DELAY(VWAP,5))
    return ((RANK(1/CLOSE)*VOLUME)/MEAN(VOLUME,20))*(HIGH*RANK(HIGH-CLOSE)/(SUM(HIGH,5)/5))-RANK(VWAP-DELAY(VWAP,5))

def alpha171(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (-1*(LOW-CLOSE)*(OPEN^5))/((CLOSE-HIGH)*(CLOSE^5))
    return (-1*(LOW-CLOSE)*(OPEN ** 5))/((CLOSE-HIGH)*(CLOSE ** 5))

def alpha172(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# HD  HIGH-DELAY(HIGH,1)
# LD  DELAY(LOW,1)-LOW
# TR  MAX(MAX(HIGH-LOW,ABS(HIGH-DELAY(CLOSE,1))),ABS(LOW-DELAY(CLOSE,1)))

# MEAN(ABS(
#     SUM((LD>0&LD>HD)?LD:0,14)*100/SUM(TR,14)
#     -SUM((HD>0&HD>LD)?HD:0,14)*100/SUM(TR,14))
# /(SUM((LD>0&LD>HD)?LD:0,14)*100/SUM(TR,14)
#     +SUM((HD>0&HD>LD)?HD:0,14)*100/SUM(TR,14))
# *100,6)    
 
    HD = HIGH-DELAY(HIGH,1)
    LD = DELAY(LOW,1)-LOW
    TR = MAX(MAX(HIGH-LOW,ABS(HIGH-DELAY(CLOSE,1))),ABS(LOW-DELAY(CLOSE,1)))
    sr1 = pd.Series(np.zeros(len(CLOSE)))
    sr2 = pd.Series(np.zeros(len(CLOSE)))
    condition1 = (LD>0) & (LD>HD)
    condition2 = (HD>0) & (HD>LD)
    sr1[condition1] = LD
    sr2[condition2] = HD
    part1 = SUM(sr1 * 100, 14) / SUM(TR, 14)
    part2 = SUM(sr2 * 100, 14) / SUM(TR, 14)
    return MEAN(ABS(part1 - part2) / (part1 + part2) * 100, 6)

def alpha173(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# 3*SMA(CLOSE,13,2)-2*SMA(SMA(CLOSE,13,2),13,2)+SMA(SMA(SMA(LOG(CLOSE),13,2),13,2),13,2)
    return 3*SMA(CLOSE,13,2)-2*SMA(SMA(CLOSE,13,2),13,2)+SMA(SMA(SMA(LOG(CLOSE),13,2),13,2),13,2)

def alpha174(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SMA((CLOSE>DELAY(CLOSE,1)?STD(CLOSE,20):0),20,1)
    sr = pd.Series(np.zeros(len(CLOSE)))
    condition = CLOSE > DELAY(CLOSE,1) 
    sr[condition] = STD(CLOSE,20)
    return SMA(sr, 20, 1)

def alpha175(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# MEAN(MAX(MAX(HIGH-LOW,ABS(DELAY(CLOSE,1)-HIGH)),ABS(DELAY(CLOSE,1)-LOW)),6)
    return MEAN(MAX(MAX(HIGH-LOW,ABS(DELAY(CLOSE,1)-HIGH)),ABS(DELAY(CLOSE,1)-LOW)),6)

def alpha176(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# CORR(RANK((CLOSE-TSMIN(LOW,12))/(TSMAX(HIGH,12)-TSMIN(LOW,12))),RANK(VOLUME),6)
    return CORR(RANK((CLOSE-TSMIN(LOW,12))/(TSMAX(HIGH,12)-TSMIN(LOW,12))),RANK(VOLUME),6)

def alpha177(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# ((20-HIGHDAY(HIGH,20))/20)*100
    return ((20-HIGHDAY(HIGH,20))/20)*100

def alpha178(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (CLOSE-DELAY(CLOSE,1))/DELAY(CLOSE,1)*VOLUME
    return (CLOSE-DELAY(CLOSE,1))/DELAY(CLOSE,1)*VOLUME

def alpha179(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# RANK(CORR(VWAP,VOLUME,4))*RANK(CORR(RANK(LOW),RANK(MEAN(VOLUME,50)),12))
    return RANK(CORR(VWAP,VOLUME,4))*RANK(CORR(RANK(LOW),RANK(MEAN(VOLUME,50)),12))

def alpha180(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (MEAN(VOLUME,20)<VOLUME)?(-1*TSRANK(ABS(DELTA(CLOSE,7)),60))*SIGN(DELTA(CLOSE,7)):(-1*VOLUME)
   sr = copy.deepcopy(-1 * VOLUME)
   sr[MEAN(VOLUME,20)<VOLUME] = (-1*TSRANK(ABS(DELTA(CLOSE,7)),60))*SIGN(DELTA(CLOSE,7))
   return sr

def alpha181(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SUM(RET-MEAN(RET,20)-(BANCHMARK_INDEX_CLOSE-MEAN(BANCHMARK_INDEX_CLOSE,20))^2,20)/SUM((BANCHMARK_INDEX_CLOSE-MEAN(BANCHMARK_INDEX_CLOSE,20))^3)    
    # BANCHMARK_INDEX_CLOSE = CLOSE.mean()
    return SUM(RET-MEAN(RET,20)-(BANCHMARK_INDEX_CLOSE-MEAN(BANCHMARK_INDEX_CLOSE,20))**2,20)/SUM((BANCHMARK_INDEX_CLOSE-MEAN(BANCHMARK_INDEX_CLOSE,20))**3, 20)    

def alpha182(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# COUNT((CLOSE>OPEN & BANCHMARK_INDEX_CLOSE>BANCHMARK_INDEX_OPEN) OR (CLOSE<OPEN &BANCHMARK_INDEX_CLOSE<BANCHMARK_INDEX_OPEN),20)/20
    BANCHMARK_INDEX_CLOSE = CLOSE.mean()
    BANCHMARK_INDEX_OPEN = OPEN.mean()
    return COUNT(((CLOSE>OPEN) & (BANCHMARK_INDEX_CLOSE>BANCHMARK_INDEX_OPEN)) | ((CLOSE<OPEN) & (BANCHMARK_INDEX_CLOSE<BANCHMARK_INDEX_OPEN)),20)/20

def alpha183(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# MAX(SUMAC(CLOSE-MEAN(CLOSE,24)))-MIN(SUMAC(CLOSE-MEAN(CLOSE,24)))/STD(CLOSE,24)
    return SUMAC_MAX(SUMAC(CLOSE-MEAN(CLOSE,24)))-SUMAC_MIN(SUMAC(CLOSE-MEAN(CLOSE,24)))/STD(CLOSE,24)

def alpha184(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# RANK(CORR(DELAY(OPEN-CLOSE,1),CLOSE,200))+RANK(OPEN-CLOSE)
    return RANK(CORR(DELAY(OPEN-CLOSE,1),CLOSE,200))+RANK(OPEN-CLOSE)

def alpha185(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# RANK(-1*(1-OPEN/CLOSE)^2)
    return RANK(-1*(1-OPEN/CLOSE) ** 2)

def alpha186(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# (MEAN(ABS(SUM((LD>0  &  LD>HD)?LD:0,14)*100/SUM(TR,14)-SUM((HD>0  &
# HD>LD)?HD:0,14)*100/SUM(TR,14))/(SUM((LD>0  &  LD>HD)?LD:0,14)*100/SUM(TR,14)+SUM((HD>0  &
# HD>LD)?HD:0,14)*100/SUM(TR,14))*100,6)+DELAY(MEAN(ABS(SUM((LD>0  &
# LD>HD)?LD:0,14)*100/SUM(TR,14)-SUM((HD>0  &  HD>LD)?HD:0,14)*100/SUM(TR,14))/(SUM((LD>0  &
# LD>HD)?LD:0,14)*100/SUM(TR,14)+SUM((HD>0 & HD>LD)?HD:0,14)*100/SUM(TR,14))*100,6),6))/2

    HD = HIGH-DELAY(HIGH,1)
    LD = DELAY(LOW,1)-LOW
    TR = MAX(MAX(HIGH-LOW,ABS(HIGH-DELAY(CLOSE,1))),ABS(LOW-DELAY(CLOSE,1)))
    sr1 = pd.Series(np.zeros(len(CLOSE)))
    sr2 = pd.Series(np.zeros(len(CLOSE)))
    condition1 = (LD>0) & (LD>HD)
    condition2 = (HD>0) & (HD>LD)
    sr1[condition1] = LD
    sr2[condition2] = HD
    part1 = SUM(sr1 * 100, 14) / SUM(TR, 14)
    part2 = SUM(sr2 * 100, 14) / SUM(TR, 14)
    step1 = MEAN(ABS(part1 - part2) / (part1 + part2) * 100, 6)
    return (step1 + DELAY(step1, 6)) / 2

def alpha187(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# SUM(OPEN<=DELAY(OPEN,1)?0:MAX(HIGH-OPEN,OPEN-DELAY(OPEN,1)),20)
    sr = pd.Series(np.zeros(len(CLOSE)))
    sr[OPEN > DELAY(OPEN,1)] = MAX(HIGH-OPEN,OPEN-DELAY(OPEN,1))
    return SUM(sr, 20)

def alpha188(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# ((HIGH-LOW\SMA(HIGH-LOW,11,2))/SMA(HIGH-LOW,11,2))*100
    return ((HIGH-LOW/SMA(HIGH-LOW,11,2))/SMA(HIGH-LOW,11,2))*100

def alpha189(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# MEAN(ABS(CLOSE-MEAN(CLOSE,6)),6)
    return MEAN(ABS(CLOSE-MEAN(CLOSE,6)),6)

def alpha190(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# LOG((COUNT(RET>((CLOSE/DELAY(CLOSE,19))^(1/20)-1),20)-1)
# *SUMIF((RET-(CLOSE/DELAY(CLOSE,19))^(1/20)-1)^2,20,RET<(CLOSE/DELAY(CLOSE,19))^(1/20)-1)
# /(COUNT(RET<(CLOSE/DELAY(CLOSE,19))^(1/20)-1,20)
# *SUMIF((RET-((CLOSE/DELAY(CLOSE,19))^(1/20)-1))^2,20,RET>(CLOSE/DELAY(CLOSE,19))^(1/20)-1))) 
    
    return LOG((COUNT(RET>((CLOSE/DELAY(CLOSE,19))**(1/20)-1),20)-1)*SUMIF((RET-(CLOSE/DELAY(CLOSE,19))**(1/20)-1)**2,20,RET<(CLOSE/DELAY(CLOSE,19))**(1/20)-1)/(COUNT(RET<(CLOSE/DELAY(CLOSE,19))**(1/20)-1,20)*SUMIF((RET-((CLOSE/DELAY(CLOSE,19))**(1/20)-1))**2,20,RET>(CLOSE/DELAY(CLOSE,19))**(1/20)-1)))


def alpha191(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN):
# CORR(MEAN(VOLUME,20),LOW,5)+(HIGH+LOW)/2-CLOSE
    return CORR(MEAN(VOLUME,20),LOW,5)+(HIGH+LOW)/2-CLOSE
   
for i in range(162, 192):
    exec('a' + str(i)  + '= alpha' + str(i) + '(HIGH,LOW,OPEN,CLOSE,AMOUNT,RET,BANCHMARK_INDEX_CLOSE,VOLUME,VWAP,BANCHMARK_INDEX_OPEN)')
    exec('factors[' + str(i) + '] = a' + str(i))  